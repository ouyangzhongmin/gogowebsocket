// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: ws_protobuf.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WSServerClient is the client API for WSServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSServerClient interface {
	// 健康检查
	CheckHealth(ctx context.Context, in *CheckHealthReq, opts ...grpc.CallOption) (*CheckHealthRsp, error)
	// 发送消息
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*OkRsp, error)
	// 强制断开连接
	ForceDisconnect(ctx context.Context, in *ForceDisconnectReq, opts ...grpc.CallOption) (*OkRsp, error)
}

type wSServerClient struct {
	cc grpc.ClientConnInterface
}

func NewWSServerClient(cc grpc.ClientConnInterface) WSServerClient {
	return &wSServerClient{cc}
}

func (c *wSServerClient) CheckHealth(ctx context.Context, in *CheckHealthReq, opts ...grpc.CallOption) (*CheckHealthRsp, error) {
	out := new(CheckHealthRsp)
	err := c.cc.Invoke(ctx, "/protobuf.WSServer/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSServerClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*OkRsp, error) {
	out := new(OkRsp)
	err := c.cc.Invoke(ctx, "/protobuf.WSServer/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSServerClient) ForceDisconnect(ctx context.Context, in *ForceDisconnectReq, opts ...grpc.CallOption) (*OkRsp, error) {
	out := new(OkRsp)
	err := c.cc.Invoke(ctx, "/protobuf.WSServer/ForceDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSServerServer is the server API for WSServer service.
// All implementations must embed UnimplementedWSServerServer
// for forward compatibility
type WSServerServer interface {
	// 健康检查
	CheckHealth(context.Context, *CheckHealthReq) (*CheckHealthRsp, error)
	// 发送消息
	SendMsg(context.Context, *SendMsgReq) (*OkRsp, error)
	// 强制断开连接
	ForceDisconnect(context.Context, *ForceDisconnectReq) (*OkRsp, error)
	mustEmbedUnimplementedWSServerServer()
}

// UnimplementedWSServerServer must be embedded to have forward compatible implementations.
type UnimplementedWSServerServer struct {
}

func (UnimplementedWSServerServer) CheckHealth(context.Context, *CheckHealthReq) (*CheckHealthRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedWSServerServer) SendMsg(context.Context, *SendMsgReq) (*OkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedWSServerServer) ForceDisconnect(context.Context, *ForceDisconnectReq) (*OkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDisconnect not implemented")
}
func (UnimplementedWSServerServer) mustEmbedUnimplementedWSServerServer() {}

// UnsafeWSServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSServerServer will
// result in compilation errors.
type UnsafeWSServerServer interface {
	mustEmbedUnimplementedWSServerServer()
}

func RegisterWSServerServer(s grpc.ServiceRegistrar, srv WSServerServer) {
	s.RegisterService(&WSServer_ServiceDesc, srv)
}

func _WSServer_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSServerServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WSServer/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSServerServer).CheckHealth(ctx, req.(*CheckHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSServer_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSServerServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WSServer/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSServerServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSServer_ForceDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceDisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSServerServer).ForceDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.WSServer/ForceDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSServerServer).ForceDisconnect(ctx, req.(*ForceDisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WSServer_ServiceDesc is the grpc.ServiceDesc for WSServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.WSServer",
	HandlerType: (*WSServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _WSServer_CheckHealth_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _WSServer_SendMsg_Handler,
		},
		{
			MethodName: "ForceDisconnect",
			Handler:    _WSServer_ForceDisconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws_protobuf.proto",
}
